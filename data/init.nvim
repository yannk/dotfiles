let s:uname = system("uname -s")

call plug#begin('~/.config/nvim/plugged')
    Plug 'tpope/vim-fugitive'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'tpope/vim-markdown'
    Plug 'ntpeters/vim-better-whitespace'
    Plug 'pangloss/vim-javascript'
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }
    Plug 'tpope/vim-unimpaired'
    Plug 'itchyny/lightline.vim'
    Plug 'bkad/CamelCaseMotion'
    Plug 'sjl/vitality.vim'
    Plug 'airblade/vim-gitgutter'
    Plug 'keith/swift.vim'
"   Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    "Plug 'neovim/nvim-lspconfig'

    "Plug 'altercation/vim-colors-solarized'
    Plug 'KeitaNakamura/neodark.vim'
    Plug 'morhetz/gruvbox'
    Plug 'lifepillar/vim-solarized8'

    if !(match(s:uname, 'FreeBSD') >= 0)
        Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
    endif

call plug#end()


set shell=/bin/sh
set novisualbell  " No blinking
set noerrorbells  " No noise.

function! InitializeDir(dir)
    if exists("*mkdir")
        if !isdirectory(a:dir)
            call mkdir(a:dir)
        endif
    endif
    if !isdirectory(a:dir)
        echo "Warning: Unable to create backup directory: " . a:dir
        echo "Try: mkdir -p " . a:dir
    endif
endfunction

call InitializeDir($HOME . "/.local/share/nvim/backup/")
set backupdir=~/.local/share/nvim/backup/
set backup
"set clipboard=unnamed,unnamedplus

set undofile                "so is persistent undo ...
set undolevels=1000         "maximum number of changes that can be undone
set undoreload=10000        "maximum number lines to save for undo on a buffer reload

set shada='150,<2000,s100

let mapleader = ','
let maplocalleader = '  '

" themes
set background=dark
"let g:solarized_termtrans=1
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
"colorscheme solarized8
colorscheme neodark
"colorscheme gruvbox

"hi CocUnderline gui=undercurl term=undercurl
"hi CocErrorHighlight ctermfg=red  guifg=#c4384b gui=undercurl term=undercurl
"hi CocWarningHighlight ctermfg=yellow guifg=#c4ab39 gui=undercurl term=undercurl

let g:lightline = {}
let g:lightline.colorscheme = 'neodark'
let g:neodark#use_256color = 1
let g:neodark#terminal_transparent = 1
let g:neodark#solid_vertsplit = 1
let g:neodark#use_custom_terminal_theme = 1 " default: 0
"let $NVIM_TUI_ENABLE_TRUE_COLOR=1
hi CocFloating ctermbg=0


" lightline
set noshowmode " Don't duplicate --INSERT-- display. Required for (let g:go_echo_go_info = 1)
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
      \ 'colorscheme': 'neodark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction'
      \ },
      \ }

set shiftwidth=4                " use indents of 4 spaces
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent
set expandtab                   " Make tabs into spaces (set by tabstop)
set smarttab                    " Smarter tab levels
set spell                       " spell checking on

" I don't want to encrypt, I want to :wq
nmap :X :x
nmap :W :w
nmap :Q :q

" jump to last position in the file on open
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

au FileType go setlocal softtabstop=0 tabstop=4 shiftwidth=4 noexpandtab
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>gdd <Plug>(go-doc)
au FileType go nmap <Leader>gdv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gr <Plug>(go-run)
au FileType go nmap <Leader>gb <Plug>(go-build)
au FileType go nmap <Leader>gt <Plug>(go-test)
au FileType go nmap <Leader>gc <Plug>(go-coverage)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

augroup filetypedetect
    au BufRead,BufNewFile *.nvim set filetype=vim
augroup END

nnoremap <silent> <Leader>ew :StripWhitespace<CR>

""" Line numbers
"" By default enable hybrid line numbers,
"" but define easy mapping to kill the gutter
set relativenumber
set number

function! NumbersOff()
    set norelativenumber
    set nonumber
endfunc

function! NumbersOn()
    set relativenumber
    set number
endfunc

function! ToggleNumbers()
    if(&relativenumber)
        call NumbersOff()
    else
        call NumbersOn()
    endif
endfunc

function! ToggleGutters()
    if g:gitgutter_enabled
        call NumbersOff()
        GitGutterDisable
    else
        call NumbersOn()
        GitGutterEnable
    endif
endfunc

nnoremap <silent> <Leader>n :call ToggleNumbers()<CR>
" toggle ALL gutter stuff
nnoremap <silent> <Leader>g :call ToggleGutters()<CR>


" Use autocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()


let g:go_fmt_command = "goimports"
let g:go_echo_commands_disabled = ['godef', 'gopls']
let g:go_echo_command_info = 0
let g:go_echo_go_info = 0
let g:go_code_completion_enabled = 0
let g:go_gopls_enabled = 1
"let g:go_def_mode='gopls'
"let g:go_info_mode='gopls'
"let g:go_referrers_mode = 'gopls'

"--- coc.nvim default settings
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"--- END coc.nvim default settings

"let g:go_highlight_structs = 0
"let g:go_highlight_interfaces = 0
"let g:go_highlight_operators = 0
"let g:go_auto_sameids = 1
