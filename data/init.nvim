call plug#begin('~/.config/nvim/plugged')
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-fugitive'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-markdown'
"Plug 'altercation/vim-colors-solarized'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/syntastic'
Plug 'pangloss/vim-javascript'
Plug 'fatih/vim-go'
Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-unimpaired'
Plug 'bling/vim-airline'
Plug 'bkad/CamelCaseMotion'
Plug 'sjl/vitality.vim'
Plug 'airblade/vim-gitgutter'
Plug 'keith/swift.vim'
Plug 'Shougo/echodoc.vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'lifepillar/vim-solarized8'
call plug#end()


set cmdheight=2 " needed for echodoc
set completeopt+=noinsert,menu,menuone
set completeopt+=noselect
set completeopt-=preview

let g:acp_enableAtStartup = 0
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#go#align_class = 1
let g:deoplete#ignore_sources = {}
let g:deoplete#ignore_sources._ = ['buffer', 'member', 'tag', 'file', 'neosnippet']
let g:deoplete#sources#go#sort_class = ['func', 'type', 'var', 'const']
let g:echodoc_enable_at_startup = 1

set shell=/bin/sh
set novisualbell  " No blinking
set noerrorbells  " No noise.

function! InitializeDir(dir)
    if exists("*mkdir")
        if !isdirectory(a:dir)
            call mkdir(a:dir)
        endif
    endif
    if !isdirectory(a:dir)
        echo "Warning: Unable to create backup directory: " . a:dir
        echo "Try: mkdir -p " . a:dir
    endif
endfunction

call InitializeDir($HOME . "/.local/share/nvim/backup/")
set backupdir=~/.local/share/nvim/backup/
set backup
"set clipboard=unnamed,unnamedplus

set undofile                "so is persistent undo ...
set undolevels=1000         "maximum number of changes that can be undone
set undoreload=10000        "maximum number lines to save for undo on a buffer reload

set shada='150,<2000,s100

let mapleader = ','
let maplocalleader = '  '

" themes
set background=dark
"let g:solarized_termtrans=1
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
colorscheme solarized8_dark

set shiftwidth=4                " use indents of 4 spaces
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent
set expandtab                   " Make tabs into spaces (set by tabstop)
set smarttab                    " Smarter tab levels
set spell                       " spell checking on

" I don't want to encrypt, I want to :wq
nmap :X :x
nmap :W :w
nmap :Q :q

" jump to last position in the file on open
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

au FileType go setlocal softtabstop=0 tabstop=4 shiftwidth=4 noexpandtab
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>gdd <Plug>(go-doc)
au FileType go nmap <Leader>gdv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gr <Plug>(go-run)
au FileType go nmap <Leader>gb <Plug>(go-build)
au FileType go nmap <Leader>gt <Plug>(go-test)
au FileType go nmap <Leader>gc <Plug>(go-coverage)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

augroup filetypedetect
    au BufRead,BufNewFile *.nvim set filetype=vim
augroup END

let g:go_snippet_engine = "neosnippet"
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

autocmd FileType go let g:syntastic_go_checkers = ['go', 'golint', 'govet', 'errcheck']

" Sometimes when using both vim-go and syntastic Vim will start lagging while saving and opening files. The following fixes this:
"let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" make lnext work
let g:syntastic_always_populate_loc_list = 1

let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:go_fmt_command = "goimports"

nnoremap <silent> <Leader>ew :StripWhitespace<CR>

""" Line numbers
"" By default enable hybrid line numbers,
"" but define easy mapping to kill the gutter
set relativenumber
set number

function! NumbersOff()
    set norelativenumber
    set nonumber
endfunc

function! NumbersOn()
    set relativenumber
    set number
endfunc

function! ToggleNumbers()
    if(&relativenumber)
        call NumbersOff()
    else
        call NumbersOn()
    endif
endfunc

function! ToggleGutters()
    if g:gitgutter_enabled
        call NumbersOff()
        GitGutterDisable
    else
        call NumbersOn()
        GitGutterEnable
    endif
endfunc

nnoremap <silent> <Leader>n :call ToggleNumbers()<CR>
" toggle ALL gutter stuff
nnoremap <silent> <Leader>g :call ToggleGutters()<CR>

"" airline
let g:airline#extensions#tabline#enabled = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" https://github.com/fatih/dotfiles/blob/master/init.vim
" I want to use my tab more smarter. If we are inside a completion menu jump
" to the next item. Otherwise check if there is any snippet to expand, if yes
" expand it. Also if inside a snippet and we need to jump tab jumps. If none
" of the above matches we just call our usual 'tab'.
function! s:tab_complete()
  if pumvisible()
    return "\<c-n>"
  endif

  if neosnippet#expandable_or_jumpable()
    return "\<Plug>(neosnippet_expand_or_jump)"
  endif

  return "\<tab>"
endfunction
imap <silent><expr><TAB> <SID>tab_complete()
